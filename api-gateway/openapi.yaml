openapi: 3.0.1
info:
  title: Shwoop Adventure App
  description: "This is the backend for the Shwoop Adventure App"
  version: 1.0.0
paths:
  /maps:
    get:
      summary: "Gets all available maps"
      operationId: get_maps
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapSummary'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMaps.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}:
    get:
      summary: "Gets all markers for the given map"
      operationId: get_map
      parameters:
      - name: map
        in: path
        description: "Name of map"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        404:
          description: "map not found"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMap.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}/beacons/{beacon}:
    get:
      summary: "Attempts to get information about the given beacon"
      operationId: get_beacon
      parameters:
      - name: map
        in: path
        description: "Name of map"
        schema:
          type: string
        required: true
      - name: beacon
        in: path
        description: "ID of the beacon"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
        404:
          description: "map or beacon not found"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBeacon.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}/challenges/{type}/{type_id}:
    post:
      summary: "Gets information about a challenge"
      operationId: get_challenge
      parameters:
      - name: map
        in: path
        description: Map containing the beacon or marker
        schema:
          type: string
        required: true
      - name: type
        in: path
        description: "Whether the challenge is from a beacon or a marker"
        schema:
          type: string
          enum: [beacon, marker]
        required: true
      - name: type-id
        in: path
        description: "Id of respective beacon or marker"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeInfo'
        404:
          description: "map or challenge not found"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /redemption-codes/{code}/:
    post:
      summary: "Gets a prize object for a redemption code"
      operationId: get_prize
      parameters:
      - in: path
        name: code
        description: "The redeemable code"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prize'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPrize.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Removes a prize from the table"
      operationId: delete_prize
      security:
        - User: []
      parameters:
      - in: path
        name: code
        description: "The redeemable code"
        schema:
          type: string
        required: true
      responses:
        204:
          description: "successful operation"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePrize.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy

  #Users
  /users/{userid}/:
    get:
      summary: "Gets the user object for an id"
      operationId: get_user
      parameters:
      - in: path
        name: userid
        description: "The user ID"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUser.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    put:
      summary: "Creates a user"
      operationId: register_user
      parameters:
      - in: path
        name: userid
        description: "The user ID"
        schema:
          type: string
        required: true
      responses:
        201:
          description: "Account created."
        409:
          description: "Conflict. Account already exists."
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUser.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/prizes:
    parameters:
    - in: path
      name: userid
      description: "The User ID"
      schema:
        type: string
      required: true
    get:
      summary: "Gets the prizes and points of a given user"
      operationId: get_user_prizes
      responses:
        200:
          description: "Account created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrizes'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserPrizes.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/redeem-treasure:
    post:
      summary: "Gets a prize for a treasure beacon"
      operationId: redeem_treasure
      parameters:
      - in: path
        name: userid
        description: "The User ID"
        schema:
          type: string
        required: true
      - in: query
        name: beacon
        description: "The treasure beacon"
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prize'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTreasure.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/challenge/{challengeid}:
    post:
      summary: "Start a new challenge"
      operationId: start_challenge
      parameters:
      - name: userid
        in: path
        description: User starting the challenge
        schema:
          type: string
        required: true
      - name: challengeid
        in: path
        description: "ID of the challenge being started"
        schema:
          type: string
        required: true
      responses:
        201:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContents'
        402:
          description: "Have not completed enough prerequisite challenges"
          content: {}
        404:
          description: "map or beacon not found"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/challenge:
    parameters:
    - in: path
      name: userid
      description: "The User ID"
      schema:
        type: string
      required: true
    post:
      summary: "Attempt to complete a challenge"
      operationId: finish_challenge
      parameters:
      - in: path
        name: map
        description: "The current map"
        schema:
          type: string
        required: true
      requestBody:
        description: "Contains the beacon of the guessed solution"
        content:
          application/json:
            schema:
              type: object
              properties:
                beacon_id:
                  type: string
                challenge_id:
                  type: string
                map:
                  type: string
      responses:
        200:
          description: "Successfully solved puzzle"
          content:
            application/json:
              schema:
                type: object
                properties:
                  prize:
                    $ref: '#/components/schemas/Prize'
        204:
          description: "Did not solve puzzle"
          content: {}
        400:
          description: "Input body incorrect. Need a valid beacon_id"
          content: {}
        404:
          description: "map not found, or challenge not started"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FinishChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Stop a challenge"
      operationId: stop_challenge
      parameters:
      - name: userid
        in: query
        description: "The user stopping the challenge"
        schema:
          type: string
        required: true
      responses:
        204:
          description: "successful operation"
        404:
          description: "map or beacon not found, or challenge not started"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StopChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/surveys/new:
    get:
      summary: "Gets a survey"
      operationId: get_survey
      parameters:
      - name: userid
        in: path
        description: The user's ID
        schema:
          type: string
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        204:
          description: "No more surveys to complete"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSurvey.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{userid}/surveys:
    post:
      summary: "Finish a survey"
      operationId: finish_survey
      parameters:
      - name: userid
        in: path
        description: The user's ID
        schema:
          type: string
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyResponse'
      responses:
        201:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prize'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FinishSurvey.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy

components:
  securitySchemes:
    User:
      type: http
      scheme: bearer
  schemas:
    MapSummary:
      type: object
      properties:
        image_url:
          type: string
          description: "Url of the map image"
        top_left:
          $ref: '#/components/schemas/Coordinate'
        bottom_right:
          $ref: '#/components/schemas/Coordinate'
    Map:
      type: object
      properties:
        markers:
          type: array
          items:
            $ref: '#/components/schemas/Marker'
    ChallengeInfo:
      type: object
      properties:
        id:
          type: string
          description: "The challenge id to be used in further communications"
        is_prerequisite:
          type: boolean
          description: "Whether this challenge counts towards the prerequisites"
        prerequisites:
          type: number
          description: "The number of prerequisite challenges that must be completed first"
        prizes:
          type: array
          items:
            type: object
            properties:
              prize:
                type: string
                description: The type of the prize
              available:
                type: number
                description: The number of this prize that may be given out by this challenge
    ChallengeContents:
      type: object
      properties:
        id:
          type: object
          description: "The id of the puzzle"
        text:
          type: string
          description: "Text of the puzzle"
        image_url:
          type: string
          description: "Url of an image related to the puzzle"
        prizes:
          type: array
          items:
            type: object
            properties:
              prize:
                type: string
                description: The type of the prize
              available:
                type: number
                description: The number of this prize that may be given out by this challenge
        claimed:
          type: number
          description: The number of prizes already given by this challenge
      required: [id, prizes, claimed]
      additionalProperties: false
    Marker:
      type: object
      properties:
        id:
          type: integer
          description: Unique id
        location:
          $ref: '#/components/schemas/Coordinate'
        open:
          type: boolean
          default: false
          description: Whether the marker requires a connection to bluetooth (if it is open, no connection required)
        release:
          type: integer
          format: int64
          description: Time at which the marker became available (in epoch seconds)
        duration:
          type: integer
          format: int64
          description: Number of seconds after release the marker is available for
      required: [id, location]
    Beacon:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Coordinate'
      oneOf:
      - type: object
        properties:
          beacon_type:
            type: string
            enum:
              - marker
          marker:
            type: integer
      - type: object
        properties:
          beacon_type:
            type: string
            enum:
              - treasure
      - type: object
        properties:
          beacon_type:
            type: string
            enum:
              - hidden
    Prize:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
          - 'points'
          - 'red-bull'
        points:
          type: number
          description: "Number of points recieved. Only present if type is 'points'"
          nullable: true
        received:
          type: string
        received_from:
          type: string
          enum: ['challenge', 'treasure']
        claimed:
          type: boolean
    UserPrizes:
      type: object
      properties:
        points:
          type: number
        prizes:
          type: array
          items:
            type: string
            description: The ID of the prize owned by the user
    Survey:
      type: object
      properties:
        question:
          type: string
          description: The question asked to the user
        answers:
          type: array
          description: The possible answers to the question
          items:
            type: string
      required: [question, answers]
      additionalProperties: false
    SurveyResponse:
      type: object
      properties:
        question:
          type: string
          description: The question asked to the user
        answer:
          type: string
          description: The given answer
      required: [question, answer]
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: string
        points:
          type: number
        surveys:
          type: array
          items:
            $ref: '#/components/schemas/SurveyResponse'
        prizes:
          type: array
          items:
            type: string
            description: The id of each unused prize the user owns
        treasure:
          type: array
          items:
            type: string
            description: Beacon ids of visited treasures
        prerequisite_challenges_completed:
          type: number
          description: Nubmer of prerequisite challenges completed
    Coordinate:
      type: object
      properties:
        latitude:
          type: number
          format: double
          maximum: 180
          minimum: -180
        longitude:
          type: number
          format: double
          maximum: 180
          minimum: -180
