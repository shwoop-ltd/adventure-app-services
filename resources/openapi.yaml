openapi: 3.0.1
info:
  title: Shwoop Adventure App
  description: "This is the backend for the Shwoop Adventure App"
  version: 1.0.0
paths:
  /maps:
    get:
      summary: "Gets all available maps"
      operationId: get_maps
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MapSummary"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMaps.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}:
    get:
      summary: "Gets all markers for the given map"
      operationId: get_map
      parameters:
        - name: map
          in: path
          description: "Name of map"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map"
        404:
          description: "map not found"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMap.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}/beacons/{beacon}:
    get:
      summary: "Attempts to get information about the given beacon"
      operationId: get_beacon
      parameters:
        - name: map
          in: path
          description: "Name of map"
          schema:
            type: string
          required: true
        - name: beacon
          in: path
          description: "ID of the beacon"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beacon"
        404:
          description: "map or beacon not found"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBeacon.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /maps/{map}/challenges/{id}/prizes:
    get:
      summary: "Gets information about a challenge's prizes"
      operationId: get_challenge_prizes
      parameters:
        - name: map
          in: path
          description: Map containing the challenge
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: "Id of challenge"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrizePool"
        404:
          description: "map or challenge not found"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetChallengePrizes.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /redemption-codes/{code}/:
    post:
      summary: "Gets a prize object for a redemption code"
      operationId: get_prize
      parameters:
        - in: path
          name: code
          description: "The redeemable code"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prize"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPrize.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Removes a prize from the table"
      operationId: delete_prize
      security:
        - User: []
      parameters:
        - in: path
          name: code
          description: "The redeemable code"
          schema:
            type: string
          required: true
      responses:
        204:
          description: "successful operation"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePrize.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /prize-types:
    get:
      summary: "Gets information about types of prizes that can be awarded"
      operationId: get_prize_types
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrizeTypes"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPrizeTypes.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy

  # Users
  /users/{user_id}/:
    get:
      summary: "Gets the user object for an id"
      operationId: get_user
      parameters:
        - in: path
          name: user_id
          description: "The user ID"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUser.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    put:
      summary: "Creates a user"
      operationId: register_user
      parameters:
        - in: path
          name: user_id
          description: "The user ID"
          schema:
            type: string
          required: true
      responses:
        201:
          description: "Account created."
        409:
          description: "Conflict. Account already exists."
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUser.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/prizes:
    parameters:
      - in: path
        name: user_id
        description: "The User ID"
        schema:
          type: string
        required: true
    get:
      summary: "Gets the prizes and points of a given user"
      operationId: get_user_prizes
      responses:
        200:
          description: "Account created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrizes"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserPrizes.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/treasure/{map}/{beacon_id}:
    post:
      summary: "Gets a prize for a treasure beacon"
      operationId: redeem_treasure
      parameters:
        - in: path
          name: user_id
          description: "The User ID"
          schema:
            type: string
          required: true
        - in: path
          name: map
          description: "The map in which the treasure is found"
          schema:
            type: string
          required: true
        - in: path
          name: beacon_id
          description: "The beacon_id of the treasure"
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prize"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClaimTreasure.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/challenge/{map}/{challenge_id}:
    post:
      summary: "Start a new challenge"
      operationId: start_challenge
      parameters:
        - name: user_id
          in: path
          description: User starting the challenge
          schema:
            type: string
          required: true
        - name: map
          in: path
          description: Map containing the challenge
          schema:
            type: string
          required: true
        - name: challenge_id
          in: path
          description: Challenge id
          schema:
            type: number
          required: true
      responses:
        201:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChallengeContents"
        400:
          description: "This challenge is not available right now"
          content: {}
        402:
          description: "Have not completed enough prerequisite challenges"
          content: {}
        404:
          description: "Map or beacon not found"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/challenge:
    post:
      summary: "Attempt to complete a challenge"
      operationId: finish_challenge
      parameters:
        - in: path
          name: user_id
          description: "The User ID"
          schema:
            type: string
          required: true
      requestBody:
        description: "Contains the beacon of the guessed solution"
        content:
          application/json:
            schema:
              type: object
              properties:
                beacon_id:
                  type: string
                map:
                  type: string
                challenge_id:
                  type: number
              required: [beacon_id, map, challenge_id]
              additionalProperties: false
      responses:
        200:
          description: "Successfully solved puzzle"
          content:
            application/json:
              schema:
                type: object
                properties:
                  prize:
                    $ref: "#/components/schemas/Prize"
        204:
          description: "Did not solve puzzle"
          content: {}
        400:
          description: "Input body incorrect. Need a valid beacon_id"
          content: {}
        403:
          description: "Challenge already completed"
        404:
          description: "map not found, or challenge not started"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FinishChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Stop a challenge"
      operationId: stop_challenge
      parameters:
        - in: path
          name: user_id
          description: "The User ID"
          schema:
            type: string
          required: true
      responses:
        204:
          description: "successful operation"
        404:
          description: "map or beacon not found, or challenge not started"
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StopChallenge.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/surveys/new:
    get:
      summary: "Gets a survey"
      operationId: get_survey
      parameters:
        - name: user_id
          in: path
          description: The user's ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Survey"
        204:
          description: "No more surveys to complete"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSurvey.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/surveys:
    post:
      summary: "Finish a survey"
      operationId: finish_survey
      parameters:
        - name: user_id
          in: path
          description: The user's ID
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveyResponse"
      responses:
        201:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/Prize"
                  - type: boolean
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FinishSurvey.Arn}/invocations"
        responses: {}
        httpMethod: POST
        type: aws_proxy

components:
  securitySchemes:
    User:
      type: http
      scheme: bearer
  schemas:
    MapSummary:
      type: object
      properties:
        image_url:
          type: string
          description: "Url of the map image"
        area:
          type: array
          items:
            $ref: "#/components/schemas/Coordinate"
      required: [image_url, area]
      additionalProperties: false
    Map:
      type: object
      properties:
        challenges:
          type: array
          items:
            $ref: "#/components/schemas/ChallengeInfo"
        events:
          type: array
          items:
            type: object
            properties:
              location:
                $ref: "#/components/schemas/Coordinate"
              description:
                type: string
                description: The event info as markdown
      required: [challenges, events]
      additionalProperties: false
    PrizePool:
      type: object
      properties:
        prizes:
          type: array
          items:
            type: object
            properties:
              prize:
                type: string
                description: The type of the prize
              points:
                type: number
                description: If the prize is 'points', the number of points awarded
              available:
                type: number
                description: The number of this prize that may be given out by this challenge
            required: [prize, available]
            additionalProperties: false
        claimed:
          type: number
          format: integer
          description: The number of prizes already claimed from this prize pool
      required: [prizes, claimed]
      additionalProperties: false
    ChallengeContents:
      type: object
      properties:
        text:
          type: string
          description: "Text of the puzzle"
        image_url:
          type: string
          description: "Url of an image related to the puzzle"
      additionalProperties: false
    ChallengeInfo:
      type: object
      properties:
        id:
          type: integer
          description: Unique id
        location:
          $ref: "#/components/schemas/Coordinate"
        prerequisites:
          type: number
          description: "The number of prerequisite challenges that must be completed first before starting this challenge"
        is_prerequisite:
          type: boolean
          description: "Whether this challenge counts towards the prerequisites"
        open:
          type: boolean
          default: false
          description: Whether the marker requires a connection to bluetooth (if it is open, no connection required)
        release_date:
          type: integer
          format: int64
          description: Time at which the marker becomes visible in epoch seconds
        active_date:
          type: integer
          format: int64
          description: Time at which marker's challenge is startable
        end_date:
          type: integer
          format: int64
          description: Time at which marker is no longer usable
      required: [id, location]
      additionalProperties: false
    Beacon:
      type: object
      properties:
        location:
          $ref: "#/components/schemas/Coordinate"
        beacon_type:
          type: string
          enum:
            - challenge-completer
            - treasure
      required: [beacon_type]
      additionalProperties: false
    PrizeTypes:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          image_url:
            type: string
            format: uri
          display_name:
            type: string
          instance_name:
            type: string
          description:
            type: string
          redeem_type:
            type: string
            enum: ["in-store", "online"]
          redeem_info:
            type: string
      required:
        [
          name,
          image_url,
          display_name,
          instance_name,
          description,
          redeem_type,
          redeem_info,
        ]
      additionalProperties: false
    Prize:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        points:
          type: number
          description: "Number of points recieved. Only present if type is 'points'"
          nullable: true
        received:
          type: string
        received_from:
          type: string
          enum: ["challenge", "treasure"]
        redeemed:
          type: boolean
          default: false
      required: [type, points, received, received_from]
      additionalProperties: false
    UserPrizes:
      type: object
      properties:
        points:
          type: number
        prizes:
          type: array
          items:
            type: string
            description: The ID of the prize owned by the user
      required: [points, prizes]
      additionalProperties: false
    Survey:
      type: object
      properties:
        question:
          type: string
          description: The question asked to the user
        answers:
          type: array
          description: The possible answers to the question
          items:
            type: string
      required: [question, answers]
      additionalProperties: false
    SurveyResponse:
      type: object
      properties:
        question:
          type: string
          description: The question asked to the user
        answer:
          type: string
          description: The given answer
      required: [question, answer]
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: string
        points:
          type: number
        surveys:
          type: array
          items:
            $ref: "#/components/schemas/SurveyResponse"
        prizes:
          type: array
          items:
            type: string
            description: The id of each unused prize the user owns
        treasure:
          type: array
          items:
            type: string
            description: Beacon ids of visited treasures
        prerequisite_challenges_completed:
          type: number
          description: Nubmer of prerequisite challenges completed
      required:
        [
          id,
          points,
          surveys,
          prizes,
          treasure,
          prerequisite_challenges_completed,
        ]
      additionalProperties: false
    Coordinate:
      type: object
      properties:
        latitude:
          type: number
          format: double
          maximum: 180
          minimum: -180
        longitude:
          type: number
          format: double
          maximum: 180
          minimum: -180
      required: [latitude, longitude]
      additionalProperties: false
